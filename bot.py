from keep_alive import keep_alive

keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä

import os
import subprocess
import requests
import json
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WIT_AI_TOKEN = os.getenv("WIT_AI_TOKEN")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üé§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç!")


def parse_wit_response(raw_text: str):
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç –æ—Ç–≤–µ—Ç Wit.ai, –∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON –ø–æ–¥—Ä—è–¥ (streamed response).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π JSON, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª–µ "text".
    """
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ JSON-–æ–±—ä–µ–∫—Ç—ã
    chunks = re.findall(r'\{.*?\}(?=\s|$)', raw_text, flags=re.S)
    last_valid = None
    for chunk in chunks:
        try:
            parsed = json.loads(chunk)
            if "text" in parsed and parsed["text"]:
                last_valid = parsed
        except json.JSONDecodeError:
            continue
    return last_valid



async def voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.voice.get_file()
    file_path_ogg = "voice.ogg"
    file_path_wav = "voice.wav"

    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await file.download_to_drive(file_path_ogg)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG ‚Üí WAV
    subprocess.run(
        ["ffmpeg", "-y", "-i", file_path_ogg, "-ar", "16000", "-ac", "1", file_path_wav],
        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Wit.ai
    url = "https://api.wit.ai/speech?v=20220622"
    headers = {
        "Authorization": f"Bearer {WIT_AI_TOKEN}",
        "Content-Type": "audio/wav"
    }

    with open(file_path_wav, "rb") as f:
        response = requests.post(url, headers=headers, data=f)

    raw = response.text
    print("RAW Wit.ai response (truncated):", raw[:1000]) # –ª–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤

    parsed = parse_wit_response(raw)
    if not parsed:
        text = "ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Wit.ai."
    else:
        text = parsed.get("text")
        if not text:
            speech = parsed.get("speech", {})
            tokens = speech.get("tokens", [])
            text = " ".join([t.get("token", "").strip() for t in tokens if t.get("token")]) or "ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."

        conf = parsed.get("speech", {}).get("confidence")
        if conf is not None:
            text = f"üó£ {text}\nüéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {round(conf * 100, 1)}%"

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for path in (file_path_ogg, file_path_wav):
        try:
            if os.path.exists(path):
                os.remove(path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")

    await update.message.reply_text(text)


if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.VOICE, voice_handler))
    print("ü§ñ Bot is starting...")
    app.run_polling()
